{
  "audioCues.lineHasError": "off",
  "diffEditor.ignoreTrimWhitespace": false, // 行頭行末のスペースを差分として表示する
  "editor.accessibilitySupport": "off",
  "editor.bracketPairColorization.enabled": true, // 標準の bracket color を使う
  "editor.cursorBlinking": "smooth", // カーソルが滑らかに点滅
  "editor.cursorStyle": "block", // カーソルはブロック型
  "editor.fontFamily": "'Ricty Diminished', Menlo, Monaco, 'Courier New', monospace", // フォントに Ricty Diminished を追加
  "editor.fontSize": 12, // フォントサイズは 12
  "editor.formatOnPaste": true, // ペースト時にフォーマット
  "editor.snippetSuggestions": "none", // スニペットは別ツールを使うため非表示
  "editor.stickyScroll.enabled": true,
  "editor.tabSize": 2, // tab キー は 2 スペースで統一
  "editor.suggestSelection": "first", // 入力候補の最上項目が初期選択される
  "files.autoSave": "afterDelay", // 時間経過で自動保存する
  "files.autoSaveDelay": 1500, // 1.5 秒後に自動保存
  "security.workspace.trust.untrustedFiles": "open", // 初回展開するファイルを信用
  "telemetry.enableTelemetry": false, // Microsoft へのデータ送信を停止
  "terminal.integrated.env.osx": {
    "FIG_NEW_SESSION": "1"
  },
  "terminal.integrated.fontFamily": "FiraCodeNerdFontCompleteM-Retina", // 統合ターミナルのフォントを変更
  "terminal.integrated.fontSize": 12, // 統合ターミナルのフォントサイズを変更
  "terminal.integrated.defaultLocation": "editor", // 統合ターミナルを editor タブとして表示
  "terminal.integrated.defaultProfile.osx": "zsh", // VSCode のデフォルトシェルは zsh
  "terminal.integrated.profiles.osx": {
    "zsh": {
      "path": "/opt/homebrew/bin/zsh",
      "args": [
        "-l"
      ]
    }
  },
  "workbench.editor.highlightModifiedTabs": true, // 未保存のタブにハイライン付加
  "workbench.iconTheme": "material-icon-theme", // 拡張機能 Material Icon Theme
  "workbench.startupEditor": "none", // VSCode 起動時にコンテンツ非表示
  "workbench.panel.defaultLocation": "right", // ワークベンチパネルを画面右に配置
  /* Visual Studio IntelliCode */
  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue", // suggestSelection の提示を IntelliCode で上書き
  /* GitHub */
  "githubIssues.useBranchForIssues": "off",
  "githubIssues.queries": [
    {
      "label": "My Issues",
      "query": "state:open author:${user} repo:${owner}/${repository} sort:created-desc"
    },
    {
      "label": "Created Issues",
      "query": "state:open repo:${owner}/${repository} sort:created-desc"
    }
  ],
  "githubPullRequests.fileListLayout": "flat",
  "githubPullRequests.pullBranch": "never",
  "githubPullRequests.remotes": [
    "origin",
    "myorigin"
  ],
  /* Docker*/
  "[dockerfile]": {
    "editor.defaultFormatter": "ms-azuretools.vscode-docker" // VSCode の拡張機能 Docker で整形
  },
  /* ESLint */
  "eslint.format.enable": true,
  /* TypeScript */
  "[typescript]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "vscode.typescript-language-features"
  },
  "typescript.inlayHints.enumMemberValues.enabled": true, // enable inlay hints for member values in enum declarations
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true, // enable inlay hints for implicit return types on function signature
  "typescript.inlayHints.parameterNames.enabled": "all", // show inlay hints for parameter names
  "typescript.inlayHints.parameterTypes.enabled": true, // enable inlay hints for implicit parameter types
  "typescript.inlayHints.propertyDeclarationTypes.enabled": true, // enable inlay hints for implicit types on property declaration
  "typescript.inlayHints.variableTypes.enabled": true, // enable inlay hints for implicit variable types
  /* Golang */
  "[go]": {
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
      "source.organizeImports": true // Go の標準機能を使用
    }
  },
  "go.goroot": "/opt/homebrew/Cellar/go/1.19.4/libexec",
  "go.lintTool": "golangci-lint", // Linter 厳格化のため golangci-lint を採用
  "go.lintOnSave": "package", // ファイル保存時に package スコープで Lint を実行
  "go.lintFlags": [
    "--config=~/engr/myrepo/dotfiles/.golangci.yml", // ワークスペースに linter 設定がないときユーザの設定を使用
    "--fast" // golangci-lint の中でも高速な Linter を VSCode 上で実行
  ],
  "go.toolsManagement.autoUpdate": true, // IDE 拡張が使用するツールを最新状態に保つ
  "go.useLanguageServer": true, // 言語サーバに gopls を採用
  "gopls": {
    "usePlaceholders": true, // 関数の引数や構造体のフィールドも補完対象
    "completeUnimported": true, // パッケージ不使用時に import 文を削除
    "buildFlags": [
      "-tags=wireinject", // google/wire で DI を実行
      "-tags=unit", // unit テストに付与
      "-tags=integration" // integration テストに付与
    ]
  },
  "go.coverMode": "atomic", // 並列処理中でもコードの通過回数をカウント
  "go.testFlags": [
    "-v", // テスト詳細を表示
    "-race", // 複数スレッドによるデータ競合を確認
    "-count=1", // テストでキャッシュを使わない
    "-coverprofile=coverage.out" // カバレッジを出力
  ],
  "go.generateTestsFlags": [
    "-template_dir",
    "~/engr/myrepo/dotfiles/gotests-template"
  ],
  /* Markdown */
  "[markdown]": {
    "editor.defaultFormatter": "yzhang.markdown-all-in-one",
    "editor.formatOnSave": true
  },
  "markdown.preview.fontFamily": "'Ricty Diminished', monospace", // Markdown プレビュー画面でのフォント
  "markdown.preview.fontSize": 11, // Markdown プレビュー画面でのフォントサイズ
  "markdown.preview.lineHeight": 1.5, // Markdown の行間は 1.5 行
  "markdown.extension.list.indentationSize": "inherit", // 画面右に Markdown のプレビュー表示
  "markdown-pdf.breaks": true, // PDF出力に改行を反映
  "markdown-pdf.styles": [
    "~/engr/myrepo/dotfiles/markdown-pdf.css" // ワークスペースに CSS がないときユーザの設定を使用
  ],
  /* Yaml */
  "[yaml]": {
    "editor.defaultFormatter": "redhat.vscode-yaml",
    "editor.formatOnSave": true,
    "editor.autoIndent": "full"
  },
  "redhat.telemetry.enabled": false,
  "yaml.format.printWidth": 120,
  "yaml.customTags": [
    "!And scalar",
    "!And mapping",
    "!And sequence",
    "!If scalar",
    "!If mapping",
    "!If sequence",
    "!Not scalar",
    "!Not mapping",
    "!Not sequence",
    "!Equals scalar",
    "!Equals mapping",
    "!Equals sequence",
    "!Or scalar",
    "!Or mapping",
    "!Or sequence",
    "!FindInMap scalar",
    "!FindInMap mappping",
    "!FindInMap sequence",
    "!Base64 scalar",
    "!Base64 mapping",
    "!Base64 sequence",
    "!Cidr scalar",
    "!Cidr mapping",
    "!Cidr sequence",
    "!Ref scalar",
    "!Ref mapping",
    "!Ref sequence",
    "!Sub scalar",
    "!Sub mapping",
    "!Sub sequence",
    "!GetAtt scalar",
    "!GetAtt mapping",
    "!GetAtt sequence",
    "!GetAZs scalar",
    "!GetAZs mapping",
    "!GetAZs sequence",
    "!ImportValue scalar",
    "!ImportValue mapping",
    "!ImportValue sequence",
    "!Select scalar",
    "!Select mapping",
    "!Select sequence",
    "!Split scalar",
    "!Split mapping",
    "!Split sequence",
    "!Join scalar",
    "!Join mapping",
    "!Join sequence",
    "!And",
    "!If",
    "!Not",
    "!Equals",
    "!Or",
    "!FindInMap",
    "!Base64",
    "!Join",
    "!Cidr",
    "!Ref",
    "!Sub",
    "!GetAtt",
    "!GetAZs",
    "!ImportValue",
    "!Select",
    "!Split"
  ],
  /* JSONC */
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features",
    "editor.formatOnSave": true
  },
  /* Protocol Buffers */
  "clang-format.style": "Google",
  "[proto3]": {
    "editor.defaultFormatter": "xaver.clang-format",
    "editor.formatOnSave": true
  },
  /* draw.io */
  "hediet.vscode-drawio.local-storage": "eyIuZHJhd2lvLWNvbmZpZyI6IntcImxhbmd1YWdlXCI6XCJcIixcImN1c3RvbUZvbnRzXCI6W10sXCJsaWJyYXJpZXNcIjpcImdlbmVyYWw7YXdzNFwiLFwiY3VzdG9tTGlicmFyaWVzXCI6W1wiTC5zY3JhdGNocGFkXCJdLFwicGx1Z2luc1wiOltdLFwicmVjZW50Q29sb3JzXCI6W1wiODA4MDgwXCIsXCJGRkZGRkZcIl0sXCJmb3JtYXRXaWR0aFwiOjI0MCxcImNyZWF0ZVRhcmdldFwiOmZhbHNlLFwicGFnZUZvcm1hdFwiOntcInhcIjowLFwieVwiOjAsXCJ3aWR0aFwiOjE2MDAsXCJoZWlnaHRcIjo5MDB9LFwic2VhcmNoXCI6dHJ1ZSxcInNob3dTdGFydFNjcmVlblwiOnRydWUsXCJncmlkQ29sb3JcIjpcIiNkMGQwZDBcIixcImRhcmtHcmlkQ29sb3JcIjpcIiM2ZTZlNmVcIixcImF1dG9zYXZlXCI6dHJ1ZSxcInJlc2l6ZUltYWdlc1wiOm51bGwsXCJvcGVuQ291bnRlclwiOjAsXCJ2ZXJzaW9uXCI6MTgsXCJ1bml0XCI6MSxcImlzUnVsZXJPblwiOmZhbHNlLFwidWlcIjpcIlwifSJ9",
}